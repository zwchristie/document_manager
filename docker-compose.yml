version: '3.8'

services:
  # Document Manager Application
  document-manager:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
        LLM_API_URL: ${LLM_API_URL:-http://llm-service:8001}
        QA_API_URL: ${QA_API_URL:-http://qa-service:8002}
        DOC_API_URL: ${DOC_API_URL:-http://doc-service:8003}
    container_name: document-manager
    ports:
      - "${PORT:-3000}:3000"
      - "${METRICS_PORT:-9090}:9090"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LLM_API_URL=${LLM_API_URL:-http://llm-service:8001}
      - QA_API_URL=${QA_API_URL:-http://qa-service:8002}
      - DOC_API_URL=${DOC_API_URL:-http://doc-service:8003}
      - LLM_API_KEY=${LLM_API_KEY}
      - QA_API_KEY=${QA_API_KEY}
      - DOC_API_KEY=${DOC_API_KEY}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - ENABLE_HEALTH_CHECKS=${ENABLE_HEALTH_CHECKS:-true}
    volumes:
      - ./logs:/app/logs:rw
    networks:
      - document-manager-network
    depends_on:
      - llm-service
      - qa-service
      - doc-service
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Mock LLM Service (for development)
  llm-service:
    image: nginx:alpine
    container_name: llm-service
    ports:
      - "8001:80"
    volumes:
      - ./docker/mock-apis/llm:/usr/share/nginx/html:ro
      - ./docker/mock-apis/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - document-manager-network
    restart: unless-stopped

  # Mock Q&A Service (for development)
  qa-service:
    image: nginx:alpine
    container_name: qa-service
    ports:
      - "8002:80"
    volumes:
      - ./docker/mock-apis/qa:/usr/share/nginx/html:ro
      - ./docker/mock-apis/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - document-manager-network
    restart: unless-stopped

  # Mock Document Service (for development)
  doc-service:
    image: nginx:alpine
    container_name: doc-service
    ports:
      - "8003:80"
    volumes:
      - ./docker/mock-apis/doc:/usr/share/nginx/html:ro
      - ./docker/mock-apis/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - document-manager-network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: document-manager-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - document-manager-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: document-manager-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - document-manager-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: document-manager-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - document-manager-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  document-manager-network:
    driver: bridge